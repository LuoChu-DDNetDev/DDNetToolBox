on:
  push:
    tags:
      - "v*.*.*"

env:
  PYTHON_VERSION: '3.11'

name: release-build
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: '签出仓库'
        uses: actions/checkout@v4

      - name: '检查 tag'
        shell: ${{ matrix.os == 'ubuntu-latest' && 'bash' || (matrix.os == 'windows-latest' && 'pwsh' || 'bash') }}
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            git fetch --depth=1 origin +refs/tags/*:refs/tags/*
            tag_name="${GITHUB_REF##*/}"
            echo "Tag $tag_name"
            git checkout $tag_name
            echo "TAG_NAME=${tag_name}" >> $GITHUB_ENV
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            git fetch --depth=1 origin +refs/tags/*:refs/tags/*
            tag_name="${GITHUB_REF##*/}"
            echo "Tag $tag_name"
            git checkout $tag_name
            echo "TAG_NAME=${tag_name}" >> $GITHUB_ENV
          else
            if (-not $env:GITHUB_REF) {
              Write-Error "GITHUB_REF is not set."
              exit 1
            }
            $tag_name = $env:GITHUB_REF.Split('/')[-1]
            if (-not $tag_name) {
              Write-Error "Tag name could not be extracted."
              exit 1
            }
            Write-Output "Tag $tag_name"
            git checkout $tag_name
            echo "TAG_NAME=$tag_name" >> $env:GITHUB_ENV
          fi

      - name: 初始化 Python ${{ env.PYTHON_VERSION }} 环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: '使用 pip 安装依赖'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install imageio

      - name: 构建可执行文件
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          nuitka-version: main
          script-name: main.py
          onefile: true
          windows-icon-from-ico: app/resource/logo.ico
          enable-plugins: pyqt5
          include-data-files: |
            app/*=./app/
          disable-console: true
          output-file: ${{ matrix.os == 'ubuntu-latest' && 'main.bin' || (matrix.os == 'windows-latest' && 'main.exe' || 'main.bin') }}
          output-dir: build
          mingw64: true

      - name: '上传发行'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG_NAME }}
          file: ${{ matrix.os == 'ubuntu-latest' && 'build/main.bin' || (matrix.os == 'windows-latest' && 'build/main.exe' || 'build/main.bin') }}
          asset_name: DDNetToolBox-${{ runner.os }}-${{ env.TAG_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          prerelease: true
